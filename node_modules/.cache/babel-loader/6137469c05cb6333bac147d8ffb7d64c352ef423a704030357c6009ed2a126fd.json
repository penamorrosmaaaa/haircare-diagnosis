{"ast":null,"code":"var _jsxFileName = \"/Users/manuelpenamorros/franciscoiglesias.cuestionario/client/src/components/Questionnaire.js\",\n  _s = $RefreshSig$();\n// Questionnaire.jsx\nimport React, { useState } from 'react';\nimport { questions } from './questionsData';\nimport ProgressBar from './ProgressBar';\nimport FinalScreen from './FinalScreen';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Questionnaire({\n  language\n}) {\n  _s();\n  const [currentStep, setCurrentStep] = useState(0);\n  const [submitted, setSubmitted] = useState(false);\n\n  // Creamos formData con valores iniciales vacíos\n  const [formData, setFormData] = useState(() => {\n    const initial = {};\n    questions.forEach(q => {\n      if (q.type === 'checkboxGroup') {\n        initial[q.name] = [];\n      } else {\n        initial[q.name] = '';\n      }\n    });\n    return initial;\n  });\n  const handleChange = e => {\n    const {\n      name,\n      value,\n      type,\n      checked\n    } = e.target;\n    if (type === 'checkbox') {\n      // Manejo de checkbox multiple\n      setFormData(prev => {\n        const currentArr = prev[name] || [];\n        if (checked) {\n          return {\n            ...prev,\n            [name]: [...currentArr, value]\n          };\n        } else {\n          return {\n            ...prev,\n            [name]: currentArr.filter(val => val !== value)\n          };\n        }\n      });\n    } else {\n      // text, select, textarea, etc.\n      setFormData(prev => ({\n        ...prev,\n        [name]: value\n      }));\n    }\n  };\n\n  /**\n   * Función que verifica si la respuesta a la pregunta actual\n   * cumple con la obligatoriedad y/o mínimos requeridos.\n   */\n  const validateCurrentQuestion = () => {\n    const question = questions[currentStep];\n    const answer = formData[question.name];\n\n    // Si la pregunta no es obligatoria, no forzamos nada extra\n    // (Aunque en tu caso dices que \"todas\" las preguntas son obligatorias,\n    //  dejamos la condición if(question.required) para que puedas configurar).\n    if (question.required) {\n      if (question.type === 'checkboxGroup') {\n        // Debemos checar cuántos checkboxes se seleccionaron\n        const selectionsCount = answer.length;\n\n        // Si se definió un 'minSelections', pedimos al menos esa cantidad\n        if (question.minSelections) {\n          if (selectionsCount < question.minSelections) {\n            alert(language === 'es' ? `Debes seleccionar al menos ${question.minSelections} opciones.` : `You must select at least ${question.minSelections} options.`);\n            return false;\n          }\n        } else {\n          // Si no hay minSelections, por default pedimos al menos 1\n          if (selectionsCount < 1) {\n            alert(language === 'es' ? 'Debes seleccionar al menos 1 opción.' : 'You must select at least 1 option.');\n            return false;\n          }\n        }\n      } else {\n        // Para select, text, etc.: si required, no puede estar vacío\n        if (!answer) {\n          alert(language === 'es' ? 'Por favor, responde la pregunta antes de continuar.' : 'Please answer the question before continuing.');\n          return false;\n        }\n      }\n    }\n\n    // Pasa la validación\n    return true;\n  };\n  const handleNext = () => {\n    // Validamos la pregunta actual\n    if (!validateCurrentQuestion()) {\n      return; // Si falla, no avanzamos\n    }\n\n    // Si pasa la validación y no estamos en la última pregunta, avanzamos\n    if (currentStep < questions.length - 1) {\n      setCurrentStep(prev => prev + 1);\n    }\n  };\n  const handlePrev = () => {\n    if (currentStep > 0) {\n      setCurrentStep(prev => prev - 1);\n    }\n  };\n\n  // Al enviar el formulario (última pregunta)\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    // Primero validamos la última pregunta\n    if (!validateCurrentQuestion()) {\n      return; // si falla, no hacemos submit\n    }\n\n    // Si todo está bien, marcamos como enviado\n    setSubmitted(true);\n  };\n\n  // Si ya se envío, mostramos la pantalla final\n  if (submitted) {\n    return /*#__PURE__*/_jsxDEV(FinalScreen, {\n      formData: formData,\n      language: language\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Obtenemos la pregunta actual\n  const question = questions[currentStep];\n\n  // Función para renderizar el tipo de input según la pregunta\n  const renderInput = q => {\n    switch (q.type) {\n      case 'text':\n      case 'email':\n      case 'number':\n        return /*#__PURE__*/_jsxDEV(\"input\", {\n          type: q.type,\n          name: q.name,\n          placeholder: q.placeholder || '',\n          required: q.required,\n          value: formData[q.name],\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 11\n        }, this);\n      case 'textarea':\n        return /*#__PURE__*/_jsxDEV(\"textarea\", {\n          name: q.name,\n          placeholder: q.placeholder || '',\n          rows: \"4\",\n          required: q.required,\n          value: formData[q.name],\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 11\n        }, this);\n      case 'select':\n        return /*#__PURE__*/_jsxDEV(\"select\", {\n          name: q.name,\n          required: q.required,\n          value: formData[q.name],\n          onChange: handleChange,\n          children: q.options.map(opt => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: opt.value,\n            disabled: opt.disabled || false,\n            children: opt.label\n          }, opt.value, false, {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 11\n        }, this);\n      case 'checkboxGroup':\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"checkbox-group\",\n          children: q.options.map(opt => /*#__PURE__*/_jsxDEV(\"label\", {\n            style: {\n              display: 'block'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              name: q.name,\n              value: opt.value,\n              checked: formData[q.name].includes(opt.value),\n              onChange: handleChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 187,\n              columnNumber: 17\n            }, this), opt.label]\n          }, opt.value, true, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 11\n        }, this);\n      default:\n        return null;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(ProgressBar, {\n      currentStep: currentStep,\n      totalSteps: questions.length\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: language === 'es' ? 'Cuestionario de Diagnóstico Personalizado para Haircare' : 'Personalized Haircare Diagnosis Questionnaire'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: language === 'es' ? `Pregunta ${currentStep + 1} de ${questions.length}` : `Question ${currentStep + 1} of ${questions.length}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: question.name,\n        children: question.question\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 9\n      }, this), renderInput(question), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"buttons\",\n        style: {\n          marginTop: '1rem'\n        },\n        children: [currentStep > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: handlePrev,\n          children: language === 'es' ? 'Atrás' : 'Back'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 13\n        }, this), currentStep < questions.length - 1 ? /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: handleNext,\n          children: language === 'es' ? 'Siguiente' : 'Next'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: language === 'es' ? 'Finalizar' : 'Finish'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 205,\n    columnNumber: 5\n  }, this);\n}\n_s(Questionnaire, \"wE9Ql6/sFSA4SPKtunCfEG2L4gk=\");\n_c = Questionnaire;\nexport default Questionnaire;\nvar _c;\n$RefreshReg$(_c, \"Questionnaire\");","map":{"version":3,"names":["React","useState","questions","ProgressBar","FinalScreen","jsxDEV","_jsxDEV","Questionnaire","language","_s","currentStep","setCurrentStep","submitted","setSubmitted","formData","setFormData","initial","forEach","q","type","name","handleChange","e","value","checked","target","prev","currentArr","filter","val","validateCurrentQuestion","question","answer","required","selectionsCount","length","minSelections","alert","handleNext","handlePrev","handleSubmit","preventDefault","fileName","_jsxFileName","lineNumber","columnNumber","renderInput","placeholder","onChange","rows","children","options","map","opt","disabled","label","className","style","display","includes","totalSteps","onSubmit","htmlFor","marginTop","onClick","_c","$RefreshReg$"],"sources":["/Users/manuelpenamorros/franciscoiglesias.cuestionario/client/src/components/Questionnaire.js"],"sourcesContent":["// Questionnaire.jsx\nimport React, { useState } from 'react';\nimport { questions } from './questionsData';\nimport ProgressBar from './ProgressBar';\nimport FinalScreen from './FinalScreen';\n\nfunction Questionnaire({ language }) {\n  const [currentStep, setCurrentStep] = useState(0);\n  const [submitted, setSubmitted] = useState(false);\n\n  // Creamos formData con valores iniciales vacíos\n  const [formData, setFormData] = useState(() => {\n    const initial = {};\n    questions.forEach((q) => {\n      if (q.type === 'checkboxGroup') {\n        initial[q.name] = [];\n      } else {\n        initial[q.name] = '';\n      }\n    });\n    return initial;\n  });\n\n  const handleChange = (e) => {\n    const { name, value, type, checked } = e.target;\n\n    if (type === 'checkbox') {\n      // Manejo de checkbox multiple\n      setFormData((prev) => {\n        const currentArr = prev[name] || [];\n        if (checked) {\n          return { ...prev, [name]: [...currentArr, value] };\n        } else {\n          return { ...prev, [name]: currentArr.filter((val) => val !== value) };\n        }\n      });\n    } else {\n      // text, select, textarea, etc.\n      setFormData((prev) => ({ ...prev, [name]: value }));\n    }\n  };\n\n  /**\n   * Función que verifica si la respuesta a la pregunta actual\n   * cumple con la obligatoriedad y/o mínimos requeridos.\n   */\n  const validateCurrentQuestion = () => {\n    const question = questions[currentStep];\n    const answer = formData[question.name];\n\n    // Si la pregunta no es obligatoria, no forzamos nada extra\n    // (Aunque en tu caso dices que \"todas\" las preguntas son obligatorias,\n    //  dejamos la condición if(question.required) para que puedas configurar).\n    if (question.required) {\n      if (question.type === 'checkboxGroup') {\n        // Debemos checar cuántos checkboxes se seleccionaron\n        const selectionsCount = answer.length;\n\n        // Si se definió un 'minSelections', pedimos al menos esa cantidad\n        if (question.minSelections) {\n          if (selectionsCount < question.minSelections) {\n            alert(\n              language === 'es'\n                ? `Debes seleccionar al menos ${question.minSelections} opciones.`\n                : `You must select at least ${question.minSelections} options.`\n            );\n            return false;\n          }\n        } else {\n          // Si no hay minSelections, por default pedimos al menos 1\n          if (selectionsCount < 1) {\n            alert(\n              language === 'es'\n                ? 'Debes seleccionar al menos 1 opción.'\n                : 'You must select at least 1 option.'\n            );\n            return false;\n          }\n        }\n      } else {\n        // Para select, text, etc.: si required, no puede estar vacío\n        if (!answer) {\n          alert(\n            language === 'es'\n              ? 'Por favor, responde la pregunta antes de continuar.'\n              : 'Please answer the question before continuing.'\n          );\n          return false;\n        }\n      }\n    }\n\n    // Pasa la validación\n    return true;\n  };\n\n  const handleNext = () => {\n    // Validamos la pregunta actual\n    if (!validateCurrentQuestion()) {\n      return; // Si falla, no avanzamos\n    }\n\n    // Si pasa la validación y no estamos en la última pregunta, avanzamos\n    if (currentStep < questions.length - 1) {\n      setCurrentStep((prev) => prev + 1);\n    }\n  };\n\n  const handlePrev = () => {\n    if (currentStep > 0) {\n      setCurrentStep((prev) => prev - 1);\n    }\n  };\n\n  // Al enviar el formulario (última pregunta)\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    // Primero validamos la última pregunta\n    if (!validateCurrentQuestion()) {\n      return; // si falla, no hacemos submit\n    }\n\n    // Si todo está bien, marcamos como enviado\n    setSubmitted(true);\n  };\n\n  // Si ya se envío, mostramos la pantalla final\n  if (submitted) {\n    return <FinalScreen formData={formData} language={language} />;\n  }\n\n  // Obtenemos la pregunta actual\n  const question = questions[currentStep];\n\n  // Función para renderizar el tipo de input según la pregunta\n  const renderInput = (q) => {\n    switch (q.type) {\n      case 'text':\n      case 'email':\n      case 'number':\n        return (\n          <input\n            type={q.type}\n            name={q.name}\n            placeholder={q.placeholder || ''}\n            required={q.required}\n            value={formData[q.name]}\n            onChange={handleChange}\n          />\n        );\n      case 'textarea':\n        return (\n          <textarea\n            name={q.name}\n            placeholder={q.placeholder || ''}\n            rows=\"4\"\n            required={q.required}\n            value={formData[q.name]}\n            onChange={handleChange}\n          />\n        );\n      case 'select':\n        return (\n          <select\n            name={q.name}\n            required={q.required}\n            value={formData[q.name]}\n            onChange={handleChange}\n          >\n            {q.options.map((opt) => (\n              <option\n                key={opt.value}\n                value={opt.value}\n                disabled={opt.disabled || false}\n              >\n                {opt.label}\n              </option>\n            ))}\n          </select>\n        );\n      case 'checkboxGroup':\n        return (\n          <div className=\"checkbox-group\">\n            {q.options.map((opt) => (\n              <label key={opt.value} style={{ display: 'block' }}>\n                <input\n                  type=\"checkbox\"\n                  name={q.name}\n                  value={opt.value}\n                  checked={formData[q.name].includes(opt.value)}\n                  onChange={handleChange}\n                />\n                {opt.label}\n              </label>\n            ))}\n          </div>\n        );\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <div className=\"container\">\n      <ProgressBar currentStep={currentStep} totalSteps={questions.length} />\n\n      <h1>\n        {language === 'es'\n          ? 'Cuestionario de Diagnóstico Personalizado para Haircare'\n          : 'Personalized Haircare Diagnosis Questionnaire'}\n      </h1>\n\n      <h2>\n        {language === 'es'\n          ? `Pregunta ${currentStep + 1} de ${questions.length}`\n          : `Question ${currentStep + 1} of ${questions.length}`}\n      </h2>\n\n      <form onSubmit={handleSubmit}>\n        <label htmlFor={question.name}>{question.question}</label>\n        {renderInput(question)}\n\n        <div className=\"buttons\" style={{ marginTop: '1rem' }}>\n          {currentStep > 0 && (\n            <button type=\"button\" onClick={handlePrev}>\n              {language === 'es' ? 'Atrás' : 'Back'}\n            </button>\n          )}\n\n          {currentStep < questions.length - 1 ? (\n            <button type=\"button\" onClick={handleNext}>\n              {language === 'es' ? 'Siguiente' : 'Next'}\n            </button>\n          ) : (\n            <button type=\"submit\">\n              {language === 'es' ? 'Finalizar' : 'Finish'}\n            </button>\n          )}\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default Questionnaire;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}